Root = ImportStmt* Stmt*

ImportStmt = 'import' ImportTarget | 'import' ImportTarget

ImportTarget = 'ident' | StringLit 'as' 'ident'

Name =
  'ident' | 'this'

StringLit = 'str' | 'multiline_str'

NumberLit = 'int_number'

BooleanLit = 'true' | 'false'

LitVal = inner: LitValInner

LitValInner =
  StringLit | NumberLit | BooleanLit

FnDef =
  'fn' 'ident' '(' ')' Block

Block = '{' Stmt* '}'

Stmt =
  ExprStmt
| DeclarationStmt
| WhileStmt
| ForStmt

ExprStmt = Expr ';'?

BinExpr =
  lhs: Expr
  op: (
    '+' | '-' | '*' | '/' | '%'
    | '&' | '|' | '^'
    | '&&' | '||'
    | '=' | '+=' | '-=' | '*=' | '/=' | '%='
    | '&=' | '|=' | '^='
    | '&&=' | '||='
    | '==' | '!=' | '<' | '>' | '<=' | '>='
  )
  rhs: Expr

TupleExpr =
  '(' (Expr (',' Expr)* ','?)? ')'

ArrExpr =
  '[' (Expr (',' Expr)* ','?)? ']'

PrimaryExpr = inner: PrimaryExprInner

PrimaryExprInner =
  TupleExpr
| ArrExpr
| Block
| Path
| LitVal
| IfExpr
| BreakStmt
| ContinueStmt
| ReturnStmt

Path = '::'? 'ident' PathFrag*
PathFrag = '::' 'ident'

FnCallExpr = Expr FnCallArgs
MethodCallExpr = Expr '.' 'ident' FnCallArgs

FnCallArgs = '(' (Expr (',' Expr)* ','?)? ')'

PrefixUnaryExpr =
  op: (
    '+' | '-' | '!' | '~'
  )
  Expr

IndexExpr = Expr IndexExprBrackets

IndexExprBrackets = '[' Expr ']'

MemberAccessExpr = Expr '.' 'ident'

Expr =
  PrimaryExpr
| BinExpr
| PrefixUnaryExpr
| FnCallExpr
| IndexExpr
| MemberAccessExpr
| MethodCallExpr
| FnDef

IfBranch =
  'if' Expr Block

ElseIfBranch =
  'else' 'if' Expr Block

ElseBranch =
  'else' Block

IfExpr =
  IfBranch ElseIfBranch* ElseBranch?

WhileStmt =
  'while' Expr Block

ForStmt =
  'for' 'ident' 'in' Expr Block

BreakStmt =
  'break' Expr?

ContinueStmt =
  'continue'

ReturnStmt =
  'return' Expr?

DeclarationStmt =
  'let' 'ident' '=' Expr ';'?